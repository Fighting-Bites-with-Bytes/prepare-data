{
  "hash": "2fb6714dcc1621cb575d451de3f14a6b",
  "result": {
    "markdown": "\n## Prepare Ticks data {#test}\n\nThe tick data is user generated with the TickApp, see @sec-abstract \\nameref{test}.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"dplyr\")\nlibrary(\"sf\")\nlibrary(\"readr\")\nlibrary(\"ggplot2\")\nlibrary(\"plotly\")\nlibrary(\"purrr\")\nlibrary(\"janitor\")\nlibrary(\"lubridate\")\n\noptions(\"sf_max.plot\" = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntick_reports <- read_csv(\"data-raw/classified/tick-reports.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 68375 Columns: 17\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): date, uuid, comment\ndbl (14): ID, Lat., Lon., x, y, acc., date acc., body part, report type, age...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nswissboundaries_path <- \"data-raw/public/swissTLM/swissBOUNDARIES3D_1_4_LV95_LN02.gdb\"\n# st_layers(swissboundaries_path)\n\nswitzerland <- read_sf(swissboundaries_path, \"TLM_LANDESGEBIET\") |>\n  st_zm() |>\n  filter(NAME != \"Liechtenstein\") |>\n  st_union() |>\n  st_transform(2056)\n\n# clean column names and format columns\ntick_reports <- tick_reports |>\n  janitor::clean_names() |>\n  mutate(across(c(id, x, y, acc, body_part, report_type, age, gender, host, pickup, deleted), ~ as.integer(.x))) |>\n  mutate(across(c(lat, lon, date_acc), ~ as.numeric(.x))) |>\n  mutate(\n    datetime = as.POSIXct(date, format = \"%Y-%m-%d %H:%M:%S\"),\n    date = as.Date(datetime)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove rows without a data or data is older than 2015\ntick_reports <- tick_reports |>\n  filter(!is.na(date)) |>\n  filter(date > \"2015-01-01\")\n\n\n\n# remove reports outside a oversized bounding box\n# This is redundant, as the data will be filtered by swissBOUNDARIES3D later\nXMIN_21781 <- 485000\nXMAX_21781 <- 834000\nYMAX_21781 <- 296000\nYMIN_21781 <- 075000\n\ntick_reports <- tick_reports %>%\n  filter(x < XMAX_21781, x > XMIN_21781) %>%\n  filter(y < YMAX_21781, y > YMIN_21781)\n\n# remove reports without a uuid or reports that are marked as deleted\ntick_reports <- tick_reports %>%\n  filter(uuid != \"\") %>%\n  filter(deleted != 1)\n\n\n# till now, all steps are relatively straightforward. Now, opinions start to\n# matter.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove reports with a spatial accuracy of more than 1 km radius\ntick_reports <- tick_reports |>\n  filter(acc < 1000)\n\n# this step is not necessary anymore, I'll keep it here to document\n# default acc values. There are more default values it seems, as can be seen\n# when visualizing the data as a histogram\ntick_reports <- tick_reports %>%\n  filter(!(acc %in% c(57274L, 64434L, 1014L)))\n\ntick_reports_sf <- st_as_sf(tick_reports, coords = c(\"lon\", \"lat\"), crs = 4326)\n\n# I dont know who came up with this, but it doesn't seem to be the case that there\n# are more locations near the default locations than outside\ndefault_locations <- data.frame(lat = c(47.3647, 46.81), lon = c(8.5534, 8.23)) |>\n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326)\n\nis_default <- st_is_within_distance(tick_reports_sf, default_locations, 1000) |>\n  map_lgl(\\(x)length(x) > 0)\n\nsum(is_default)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n\n```{.r .cell-code}\n# date accuracy only has two values: 43'200 and 432'000 (0.5 and 5 days?)\n# There are only 8k reports for the higher value, we can discard these\ntable(tick_reports$date_acc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n 43200 432000 \n 39959   8253 \n```\n:::\n\n```{.r .cell-code}\ntick_reports <- tick_reports |>\n  filter(date_acc < 50000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntick_reports$date_acc <- NULL\ntick_reports$body_part <- NULL\ntick_reports$report_type <- NULL\ntick_reports$age <- NULL\ntick_reports$gender <- NULL\ntick_reports$host <- NULL\ntick_reports$pickup <- NULL\ntick_reports$uuid <- NULL\ntick_reports$comment <- NULL\ntick_reports$deleted <- NULL\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# some reports are obivously duplicates: same x and y and date (time may vary slighly)\ntick_reports |>\n  group_by(x, y, date) |>\n  filter(n() > 1) |>\n  select(id, datetime)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAdding missing grouping variables: `x`, `y`, `date`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 397 × 5\n# Groups:   x, y, date [176]\n        x      y date          id datetime           \n    <int>  <int> <date>     <int> <dttm>             \n 1 609729 261433 2015-04-13   118 2015-04-13 08:34:29\n 2 609729 261433 2015-04-13   119 2015-04-13 08:34:29\n 3 731962 253501 2015-08-26  2028 2015-08-26 20:46:02\n 4 731962 253501 2015-08-26  2029 2015-08-26 20:46:02\n 5 621424 264799 2016-07-18  5737 2016-07-18 13:52:11\n 6 621424 264799 2016-07-18  5738 2016-07-18 13:53:07\n 7 634791 249092 2016-07-25  5967 2016-07-25 08:18:49\n 8 634791 249092 2016-07-25  5968 2016-07-25 08:18:49\n 9 634791 249092 2016-07-25  5969 2016-07-25 08:18:49\n10 667235 212674 2016-08-04  6233 2016-08-04 09:34:30\n# ℹ 387 more rows\n```\n:::\n\n```{.r .cell-code}\n# keep only distinct reports\ntick_reports <- tick_reports |>\n  distinct(x, y, date, .keep_all = TRUE)\n\n\ntick_reports$x <- NULL\ntick_reports$y <- NULL\n\ntick_reports_sf <- st_as_sf(tick_reports, coords = c(\"lon\", \"lat\"), crs = 4326) |>\n  st_transform(2056)\n\n\ntick_reports_sf <- cbind(tick_reports_sf, st_coordinates(tick_reports_sf))\n\ntick_reports_sf <- tick_reports_sf[switzerland, , ]\n\n\ntick_reports_sf$year <- year(tick_reports_sf$date)\n\nggplot(tick_reports_sf) +\n  geom_sf() +\n  facet_wrap(~year)\n```\n\n::: {.cell-output-display}\n![](01_Clean_reports_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntick_reports_sf$year <- NULL\n\nticks_path <- \"data-processed/Ticks\"\n\nif(!dir.exists(ticks_path)) {dir.create(ticks_path)}\n\nst_write(tick_reports_sf, file.path(ticks_path, \"tick_reports.gpkg\"), \"reports_0.1\", overwrite = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLayer reports_0.1 in dataset data-processed/Ticks/tick_reports.gpkg already exists:\nuse either append=TRUE to append to layer or append=FALSE to overwrite layer\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in eval(expr, envir, enclos): Dataset already exists.\n```\n:::\n:::",
    "supporting": [
      "01_Clean_reports_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}